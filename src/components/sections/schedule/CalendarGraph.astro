---
interface CalendarEvent {
  title: string;
  startTime: string;  // Format: "HH:mm" in PST
  endTime: string;    // Format: "HH:mm" in PST
  description?: string;
  location?: string;
}

interface Props {
  events?: CalendarEvent[];
  startHour?: number;
  endHour?: number;
}

// Sample events in PST
const sampleEvents: CalendarEvent[] = [
	{
		title: 'Registration',
		startTime: '08:00',
		endTime: '12:00',
		description: 'Registration for the conference opens.',
	},
	{
		title: 'Dr. Zanbergs Introduction to Wine Chemistry',
		startTime: '12:00',
		endTime: '13:00',
		location: 'Main Conference Room',
		description: 'Daily sync with the team',
	},
	{
		title: 'Wine Tour',
		startTime: '13:00',
		endTime: '16:30',
	},
	{
		title: 'Break',
		startTime: '16:30',
		endTime: '17:00',
	},
	{
		title: "Dr. McNiel's Conference Introduction & Land Acknowledgement",
		startTime: '17:00',
		endTime: '18:00',
	},
	{
		title: 'Dinner',
		startTime: '18:00',
		endTime: '19:00',
	},
	{
		title: 'Pub Night',
		startTime: '19:00',
		endTime: '21:00',
	},
];



const { 
  events = sampleEvents,
  startHour = 8,
  endHour = 21 
} = Astro.props;

// Generate time slots
const timeSlots = [];
for (let hour = startHour; hour < endHour; hour++) {
  timeSlots.push(
    `${hour.toString().padStart(2, '0')}:00`,
    `${hour.toString().padStart(2, '0')}:30`
  );
}

// Format time for display (convert 24h to 12h)
const formatTimeDisplay = (time: string) => {
  const [hours, minutes] = time.split(':');
  const hour = parseInt(hours);
  const ampm = hour >= 12 ? 'pm' : 'am';
  const hour12 = hour % 12 || 12;
  return `${hour12}:${minutes} ${ampm}`;
};

// Calculate event position and height
const getEventStyle = (startTime: string, endTime: string) => {
  const [startHours, startMinutes] = startTime.split(':').map(Number);
  const [endHours, endMinutes] = endTime.split(':').map(Number);
  
  const startInMinutes = startHours * 60 + startMinutes;
  const endInMinutes = endHours * 60 + endMinutes;
  const duration = endInMinutes - startInMinutes;
  
  // Each 30-min slot is 4rem high (64px)
  const top = (startInMinutes - startHour * 60) / 30 * 4;
  const height = duration / 30 * 4;
  
  return {
    top: `${top}rem`,
    height: `${height}rem`
  };
};

---

<div class="w-full max-w-7xl mx-auto px-4 py-8">
  <div class="bg-white rounded-lg shadow-sm border border-gray-200">
    <!-- Calendar Header -->
    <div class="p-4 border-b border-gray-200">
      <h2 class="text-lg font-semibold text-gray-900">
        Monday, January 13, 2025
      </h2>
    </div>

    <!-- Calendar Grid -->
    <div class="grid grid-cols-[100px_1fr] min-h-[800px] relative">
      <!-- Time Labels -->
      <div class="border-r border-gray-200 ">
        {timeSlots.map((time) => (
          <div class="h-16 flex items-center justify-end pr-4 text-sm text-gray-500">
            {formatTimeDisplay(time)}
          </div>
        ))}
      </div>

      <!-- Events Container -->
      <div class="relative">
        <!-- Time Grid Lines -->
        {timeSlots.map((time) => (
          <div class="h-16 border-b border-gray-100 p-2" />
        ))}

        <!-- Events -->
        {events.map((event) => {
          const styles = getEventStyle(event.startTime, event.endTime);
          
          return (
            <div
              class={`absolute left-0 right-0 mx-2 p-3 rounded-md border-l-4 transition-all duration-200 bg-blue-600 text-white`}
              style={`top: ${styles.top}; height: ${styles.height};`}
            >
              <div class="flex flex-col h-full">
                <h3 class="font-medium text-gray-900 mb-1">
                  {event.title}
                </h3>
                <div class="text-sm text-gray-500 mb-1">
                  {formatTimeDisplay(event.startTime)} - {formatTimeDisplay(event.endTime)}
                </div>
                {event.location && (
                  <div class="text-sm text-gray-500 flex items-center">
                    <span class="mr-1">üìç</span> {event.location}
                  </div>
                )}
                {event.description && (
                  <p class="text-sm text-gray-600 mt-1">
                    {event.description}
                  </p>
                )}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  </div>
</div>

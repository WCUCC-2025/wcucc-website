---
import SpeakerTile from '@src/components/elements/SpeakerTile.astro';
import SectionTitle from '@src/components/elements/ui/SectionTitle.astro';
import OverlayBase from '@src/components/elements/OverlayBase.astro';
import SpeakerDetails from './elements/SpeakerDetails.astro';

import { getCollection } from 'astro:content';
const speakers = await getCollection('speakers');
---

<section class="z-50 w-screen bg-white p-5 sm:p-10 md:p-14 lg:p-20">
	<SectionTitle color="black"> Speakers </SectionTitle>
	<section class="flex w-full flex-col items-center justify-start">
		<div class="grid grid-cols-1 gap-5 md:grid-cols-2 xl:grid-cols-3">
			{
				speakers.map(speaker => {
					return (
						<SpeakerTile
							data={speaker.data}
							image={speaker.data.photograph}
							name={`Dr. ${speaker.data.firstName} ${speaker.data.lastName}`}
							title={speaker.data.position}
							university={`${speaker.data.institution}, ${speaker.data.department}`}
							talkTitle={speaker.data.talkTitle}
							learnMore={speaker.data.linkToMoreInformation}
						/>
					);
				})
			}
		</div>
	</section>
</section>

<OverlayBase identifier="speakerdetails">
	<div
			class="flex max-h-[96vh] w-full flex-1 flex-col gap-4 overflow-y-auto overflow-x-hidden rounded-lg bg-white p-5 transition-all duration-300 ease-in-out sm:w-[80%] md:w-[70%]"
	>
		<section class="flex flex-col justify-between md:flex-row">
			<img
				class="p-speaker-photograph h-auto max-h-[12rem] w-[12rem] rounded-lg bg-[#00BBFF] object-cover"
				src=""
				alt="profile-picture"
			/>
			<div
				class="flex flex-1 flex-col items-start justify-center gap-2 py-5 leading-none md:px-5 md:py-0"
			>
				<p class="p-speaker-name m-0 text-3xl font-bold leading-none">
				</p>
				<p
					class="p-speaker-position m-0 text-xl font-semibold leading-none"
				>
				</p>
				<p
					class="p-speaker-institution m-0 text-xl font-normal leading-snug"
				>
				</p>
			</div>
		</section>
		<section class="flex flex-1 flex-col gap-4">
			<div
				class="grid w-full grid-cols-2 grid-rows-1 gap-4 rounded-lg bg-gray-100 p-2"
			>
				<div
					class="p-abstract-toggle toggle-active w-full cursor-pointer rounded-lg p-2 text-center"
				>
					Abstract
				</div>
				<div
					class="p-about-toggle w-full cursor-pointer rounded-lg p-2 text-center"
				>
					Biography
				</div>
			</div>
			<div class="p-abstract">
				<p
					class="p-speaker-abstract m-0 text-xl font-normal leading-normal"
				>
				</p>
			</div>
			<div class="p-about hide">
				<p class="p-speaker-bio m-0 text-xl font-normal leading-normal">
				</p>
			</div>
		</section>
		<section class="p-speaker-events flex flex-col gap-2">
			<p class="m-0 text-xl font-bold">Upcoming Events</p>
			<div
				class="flex flex-row gap-4 rounded-md border-[1px] border-solid border-black p-2"
			>
				<div
					class="flex flex-col items-center justify-center gap-2 rounded-md border-[1px] border-solid border-black px-4 py-2"
				>
					<p class="m-0 text-2xl font-bold leading-none">15</p>
					<p class="m-0 text-lg font-light leading-none">May</p>
				</div>
				<div class="flex flex-col items-start justify-center">
					<p class="leading-0 font-regular m-0">Event Title</p>
					<p class="leading-0 m-0 font-light">Event Description</p>
				</div>
			</div>
		</section>
	</div>
</OverlayBase>

<style>
	.hide {
		display: none;
	}
	.toggle-active {
		background-color: white;
		box-shadow: 0px 2px 5px gray;
	}
</style>

<script is:inline>
	const speakbtn = document.getElementById('trigger-overlay');
	const speakoverlay = document.getElementById('speakerdetails');

	speakoverlay.addEventListener('click', event => {
		if (event.target === speakoverlay) {
			speakoverlay.classList.add('hide');
		}
	});

	const speakerPhotograph = document.querySelector('.p-speaker-photograph');
	const speakerName = document.querySelector('.p-speaker-name');
	const speakerPosition = document.querySelector('.p-speaker-position');
	const speakerInstitution = document.querySelector('.p-speaker-institution');
	const speakerAbstract = document.querySelector('.p-speaker-abstract');
	const speakerBio = document.querySelector('.p-speaker-bio');

	const populateOverlay = speakerInfo => {
		!abstractToggle.classList.contains('toggle-active') &&
			abstractToggle.classList.add('toggle-active');
		aboutToggle.classList.remove('toggle-active');
		abstractContainer.classList.remove('hide');
		!aboutContainer.classList.contains('hide') &&
			aboutContainer.classList.add('hide');

		speakerPhotograph.src = `/speakers/${speakerInfo.photograph}`;
		speakerPhotograph.alt = speakerInfo.lastName;
		speakerName.textContent = `${speakerInfo.firstName} ${speakerInfo.lastName}`;
		speakerPosition.textContent = speakerInfo.position;
		speakerInstitution.textContent = `${speakerInfo.department}, ${speakerInfo.institution}`;
		speakerAbstract.textContent = `${speakerInfo.abstract}`;
		speakerBio.textContent = speakerInfo.biography;
	};

	const abstractToggle = document.querySelector('.p-abstract-toggle');
	const aboutToggle = document.querySelector('.p-about-toggle');

	const abstractContainer = document.querySelector('.p-abstract');
	const aboutContainer = document.querySelector('.p-about');

	abstractToggle.addEventListener('click', () => {
		abstractToggle.classList.add('toggle-active');
		aboutToggle.classList.remove('toggle-active');
		abstractContainer.classList.remove('hide');
		aboutContainer.classList.add('hide');
	});

	aboutToggle.addEventListener('click', () => {
		abstractToggle.classList.remove('toggle-active');
		aboutToggle.classList.add('toggle-active');
		abstractContainer.classList.add('hide');
		aboutContainer.classList.remove('hide');
	});

	document.querySelectorAll('[data-speaker]').forEach(element => {
		element.addEventListener('click', () => {
			const speakerInfo = JSON.parse(element.dataset.speaker);
			populateOverlay(speakerInfo);
			speakoverlay.classList.remove('hide');
		});
	});
</script>
